---
swagger: "2.0"
info:
  description: "This is a OpenAPI 2 specification for outdoor-sales"
  version: "1.0.0"
  title: "OpenAPI outdoor-sales"
host: "localhost:3006"
basePath: "/api"
tags:
- name: "Appointment"
  description: "Appointment creation and tracking operations"
- name: "Branch"
  description: "Branch creation and listing operations"
- name: "User"
  description: "User crud and auth operations"
- name: "App"
  description: "App layout crud and operations"
- name: "Group"
  description: "Group crud and permessions operations"
- name: "Client"
  description: "Client crud and listing operations"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /app:
    get:
      tags:
      - "App"
      description: "list all layout configs"
      operationId: "getAppLayoutList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/App"
      security:
      - api_key: []
      x-swagger-router-controller: "App"
    post:
      tags:
      - "App"
      summary: "create configuration for whole layout"
      description: "add new custom config for header,sidebar,footer,aside and styling"
      operationId: "addAppLayout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "layout"
        description: "object of the new custom layout config"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/App"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/App"
      security:
      - api_key: []
      x-swagger-router-controller: "App"
  /app/{id}:
    get:
      tags:
      - "App"
      summary: "get configuration for whole layout"
      description: "get custom config for header,sidebar,footer,aside and styling"
      operationId: "appGetOne"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of item that needs to be fetched"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/App"
      security:
      - api_key: []
      x-swagger-router-controller: "App"
    put:
      tags:
      - "App"
      summary: "update configuration for whole layout"
      description: "update custom config for header,sidebar,footer,aside and styling"
      operationId: "updateAppLayout"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of item that needs to be fetched"
        required: true
        type: "string"
      - in: "body"
        name: "layout"
        description: "object of the new custom layout config"
        required: true
        schema:
          $ref: "#/definitions/App"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/App"
      security:
      - api_key: []
      x-swagger-router-controller: "App"
    delete:
      tags:
      - "App"
      summary: "delete configuration for whole layout"
      description: "delete custom config for header,sidebar,footer,aside and styling"
      operationId: "deleteAppLayout"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of item that needs to be deleted"
        required: true
        type: "string"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/App"
      security:
      - api_key: []
      x-swagger-router-controller: "App"
  /governorate:
    get:
      tags:
      - "Governorate"
      summary: "Get all governorates"
      description: "Get all governorates\n"
      operationId: "getAllGovernorates"
      produces:
      - "application/json"
      - "xml"
      parameters:
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Governorate"
    post:
      tags:
      - "Governorate"
      summary: "adds Governorate"
      description: "Adds Governorate to the system"
      operationId: "addGovernorate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "GovernorateItem"
        description: "Governorate to add"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Governorate"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Governorate"
        "400":
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ApiResponse"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ApiResponse"
        "409":
          description: "Conflict record"
          schema:
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Governorate"
  /branch:
    get:
      tags:
      - "Branch"
      summary: "List All branches"
      description: ""
      operationId: "listBranches"
      parameters:
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Branch"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      security:
      - loanstore_auth:
        - "write:loans"
        - "read:loans"
      x-swagger-router-controller: "Branch"
    post:
      tags:
      - "Branch"
      summary: "adds branch"
      description: "Adds branch to the system"
      operationId: "createbranch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "branches"
        description: "branches to add"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Branch"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Branch"
        "400":
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ApiResponse"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ApiResponse"
        "409":
          description: "Conflict record"
          schema:
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Branch"
    put:
      tags:
      - "Branch"
      summary: "Update an existing Branchs"
      description: ""
      operationId: "updateBranchs"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Branch object that needs to be updated"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Branch"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Branch"
        "400":
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ApiResponse"
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Record Not Found"
          schema:
            $ref: "#/definitions/ApiResponse"
        "409":
          description: "Conflict record"
          schema:
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Branch"
    delete:
      tags:
      - "Branch"
      summary: "Delete branches By Id"
      operationId: "deleteBranchesById"
      parameters:
      - in: "body"
        name: "IDs"
        description: "array of IDs to be deleted"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Branch"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Validation Error"
          schema:
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Branch"
  /branch/listByGeo:
    get:
      tags:
      - "Branch"
      description: "Get  list of branchs by GEO"
      operationId: "getBranchByGeo"
      parameters:
      - name: "longitude"
        in: "query"
        description: "longitude of the area that needs to fetch own branches"
        required: true
        type: "string"
      - name: "latitude"
        in: "query"
        description: "latitude of the area that needs to fetch own branches"
        required: true
        type: "string"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Branch"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      security:
      - loanstore_auth:
        - "write:loans"
        - "read:loans"
      x-swagger-router-controller: "Branch"
  /user:
    get:
      tags:
      - "User"
      summary: "Get All user"
      operationId: "listUsers"
      parameters:
      - name: "rps"
        in: "query"
        description: "Size of the page results in pagination"
        required: false
        type: "integer"
      - name: "rpi"
        in: "query"
        description: "Current page index in pagination"
        required: false
        type: "integer"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      security:
      - loanstore_auth:
        - "write:loans"
        - "read:loans"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      summary: "Create a list of user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Create user List"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Validation Error"
          schema:
            type: "string"
        "403":
          description: "Forbidden"
          schema:
            type: "string"
        "409":
          description: "Conflict record"
          schema:
            type: "string"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      security:
      - loanstore_auth:
        - "write:loans"
        - "read:loans"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "User"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
      - in: "body"
        name: "user"
        description: "Updated user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
          schema:
            type: "string"
        "403":
          description: "Forbidden"
          schema:
            type: "string"
        "404":
          description: "User not found"
          schema:
            type: "string"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      security:
      - loanstore_auth:
        - "write:loans"
        - "read:loans"
      deprecated: false
      x-swagger-router-controller: "User"
  /user/login:
    post:
      tags:
      - "User"
      summary: "Logs user into the system"
      description: ""
      operationId: "userLogin"
      parameters:
      - in: "body"
        name: "user"
        description: "The user email & Password for login"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-access-token:
              type: "string"
              description: "authorization token"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username/password supplied"
          schema:
            type: "string"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      security:
      - loanstore_auth:
        - "write:loans"
        - "read:loans"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "User"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "userLogout"
      parameters:
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/listdbyFilters:
    post:
      tags:
      - "User"
      summary: "ListUsers By specific Filters"
      operationId: "listUsersByFilters"
      parameters:
      - name: "rps"
        in: "query"
        description: "Size of the page results in pagination"
        required: false
        type: "integer"
      - name: "rpi"
        in: "query"
        description: "Current page index in pagination"
        required: false
        type: "integer"
      - in: "body"
        name: "matchingParams"
        description: "The params to fetch users."
        required: false
        schema:
          $ref: "#/definitions/matchingParams"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Validation Error"
          schema:
            type: "string"
        "403":
          description: "Forbidden"
          schema:
            type: "string"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      security:
      - loanstore_auth:
        - "write:loans"
        - "read:loans"
      x-swagger-router-controller: "User"
  /user/getUser/{fullName}:
    get:
      tags:
      - "User"
      summary: "Get user by user name"
      operationId: "getUserByName"
      parameters:
      - name: "fullName"
        in: "path"
        description: "The id that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
          schema:
            type: "string"
        "403":
          description: "Forbidden"
          schema:
            type: "string"
        "404":
          description: "User not found"
          schema:
            type: "string"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      security:
      - loanstore_auth:
        - "write:loans"
        - "read:loans"
      x-swagger-router-controller: "User"
  /user/{id}:
    put:
      tags:
      - "User"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUserById"
      parameters:
      - name: "id"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "user"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
          schema:
            type: "string"
        "403":
          description: "Forbidden"
          schema:
            type: "string"
        "404":
          description: "User not found"
          schema:
            type: "string"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      security:
      - loanstore_auth:
        - "write:loans"
        - "read:loans"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      summary: "Deletes a User"
      operationId: "deleteUserById"
      parameters:
      - name: "id"
        in: "path"
        description: "User id to delete"
        required: true
        type: "string"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "Invalid ID supplied"
          schema:
            type: "string"
        "403":
          description: "Forbidden"
          schema:
            type: "string"
        "404":
          description: "Record Not Found"
          schema:
            type: "string"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      security:
      - loanstore_auth:
        - "write:loans"
        - "read:loans"
      x-swagger-router-controller: "User"
  /group:
    get:
      tags:
      - "Group"
      summary: "list groups of permessions"
      operationId: "listGroup"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the employee"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "Group"
    post:
      tags:
      - "Group"
      summary: "ceate group"
      description: "This can only be done by the logged in Employee."
      operationId: "createGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created Group array"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Group"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
        "400":
          description: "Validation Error"
          schema:
            type: "string"
        "403":
          description: "Forbidden"
          schema:
            type: "string"
        "404":
          description: "Record Not Found"
          schema:
            type: "string"
        "409":
          description: "Conflict record"
          schema:
            type: "string"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      x-swagger-router-controller: "Group"
  /group/{id}:
    get:
      tags:
      - "Group"
      summary: "Get employee by Id"
      operationId: "getGroupById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing."
        required: true
        type: "string"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "Group"
    put:
      tags:
      - "Group"
      summary: "Updated Group"
      description: "This can only be done by the logged in employee."
      operationId: "updateGroupById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the group to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated employee object"
        required: true
        schema:
          $ref: "#/definitions/Group"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Group"
        "400":
          description: "Validation Error"
          schema:
            type: "string"
        "403":
          description: "Forbidden"
          schema:
            type: "string"
        "404":
          description: "Record Not Found"
          schema:
            type: "string"
        "409":
          description: "Conflict record"
          schema:
            type: "string"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      x-swagger-router-controller: "Group"
    delete:
      tags:
      - "Group"
      summary: "Delete group"
      description: "This can only be done by the logged in employee."
      operationId: "deleteGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The Group that needs to be deleted"
        required: true
        type: "string"
      - name: "x-access-token"
        in: "header"
        description: "user token to check if user authenticated"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "Invalid ID supplied"
          schema:
            type: "string"
        "403":
          description: "Forbidden"
          schema:
            type: "string"
        "404":
          description: "Record Not Found"
          schema:
            type: "string"
        "500":
          description: "Internal Server Error"
          schema:
            type: "string"
      x-swagger-router-controller: "Group"
securityDefinitions:
  loanstore_auth:
    type: "oauth2"
    authorizationUrl: "https://tasaheel.swagger.io/oauth/authorize"
    flow: "implicit"
    scopes:
      write:loans: "modify loans in your account"
      read:loans: "read your loans"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  App:
    type: "object"
    example:
      layout:
        aside:
          tabs:
          - icon: "icon-list"
            index: "1"
            value: "icon-list"
          - icon: "icon-list"
            index: "1"
            value: "icon-list"
          content:
          - index: "1"
            type: "notifList"
            desc: "Hello Buddy"
          - index: "1"
            type: "notifList"
            desc: "Hello Buddy"
        styling:
          typography:
            text: "1rem"
            title: "2rem"
            font: "'Open Sans', sans-serif"
          spacing: "1rem"
          breakpoints:
            md: "64em"
            sm: "30em"
            xs: "0em"
            lg: "75em"
          colors:
            secondary: "#7F8FA4"
            success: "#1fce6d"
            warning: "#f2c500"
            danger: "#e94b35"
            error: "#e94b35"
            primary: "#2c97de"
          base: "16px"
        breadcrumb: "{}"
        footer:
          company:
            name: "Room Art Space"
            url: "https://google.com"
          poweredBy:
            name: "Raseedy"
            url: "https://google.com"
        sidebar:
          nav:
            items:
            - badge:
                variant: "info"
                text: "NEW"
              name: "Dashboard"
              icon: "icon-speedometer"
              url: "/dashboard"
            - badge:
                variant: "info"
                text: "NEW"
              name: "Dashboard"
              icon: "icon-speedometer"
              url: "/dashboard"
          form: "{}"
          footer:
            desc: "you can win"
          header: "{}"
          minimizer: "{}"
        header:
          appNavbarBrand:
            minimized:
              logo:
                'src:': ""
                alt: ""
            full:
              logo:
                'src:': ""
                alt: ""
          primaryMenu:
          - name: "Dashboard"
            index: 0
            type: "NavItem"
            class: "nav-link"
            url: "/dashboard"
          - name: "Dashboard"
            index: 0
            type: "NavItem"
            class: "nav-link"
            url: "/dashboard"
          secondaryMenu:
          - badge:
              variant: "danger"
            name: "Dashboard"
            icon: "icon-bell"
            menuItems:
            - name: "You have new notifications"
              type: "header"
            - name: "You have new notifications"
              type: "header"
            index: 3
            type: "StyledNavItem"
            class: "nav-link"
            url: "/dashboard"
          - badge:
              variant: "danger"
            name: "Dashboard"
            icon: "icon-bell"
            menuItems:
            - name: "You have new notifications"
              type: "header"
            - name: "You have new notifications"
              type: "header"
            index: 3
            type: "StyledNavItem"
            class: "nav-link"
            url: "/dashboard"
        main:
          hasAside: true
          hasSidebar: true
  Branch:
    type: "object"
    properties:
      id:
        type: "string"
      branch_code:
        type: "integer"
      branch_name:
        type: "string"
      en_name:
        type: "string"
      districtId:
        type: "string"
      governantId:
        $ref: "#/definitions/Governorate"
      branch_add:
        type: "string"
      en_address:
        type: "string"
      geo:
        $ref: "#/definitions/Branch_geo"
      update_stamp:
        type: "string"
    example:
      branch_code: 0
      geo:
        latitude: "latitude"
        longitude: "longitude"
      districtId: "districtId"
      en_address: "en_address"
      branch_name: "branch_name"
      branch_add: "branch_add"
      en_name: "en_name"
      id: "id"
      governantId: "governantId"
      update_stamp: "update_stamp"
  Governorate:
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      name:
        $ref: "#/definitions/Governorate_name"
    example:
      name:
        ar: "ar"
        en: "en"
      id: "d290f1ee-6c54-4b01-90e6-d701748f0851"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      fullName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      branchId:
        $ref: "#/definitions/Branch"
      isActive:
        type: "boolean"
        default: true
      firstLogin:
        type: "boolean"
        default: true
      groups:
        type: "array"
        items:
          $ref: "#/definitions/Group"
      createdBy:
        $ref: "#/definitions/User"
    example:
      branchId:
        branch_code: 0
        geo:
          latitude: "latitude"
          longitude: "longitude"
        districtId: "districtId"
        en_address: "en_address"
        branch_name: "branch_name"
        branch_add: "branch_add"
        en_name: "en_name"
        id: "id"
        governantId: "governantId"
        update_stamp: "update_stamp"
      password: "password"
      phone: "phone"
      firstLogin: true
      fullName: "fullName"
      groups:
      - permissions: "permissions"
        name:
          ar: "ar"
          en: "en"
        id: 0
      - permissions: "permissions"
        name:
          ar: "ar"
          en: "en"
        id: 0
      id: "id"
      isActive: true
      email: "email"
  Group:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        $ref: "#/definitions/Group_name"
      permissions:
        type: "string"
    example:
      permissions: "permissions"
      name:
        ar: "ar"
        en: "en"
      id: 0
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
  Branch_geo:
    type: "object"
    properties:
      longitude:
        type: "string"
      latitude:
        type: "string"
    example:
      latitude: "latitude"
      longitude: "longitude"
  matchingParams:
    type: "object"
    properties:
      governantId:
        type: "string"
      districtId:
        type: "string"
      branchId:
        type: "string"
  Group_name:
    type: "object"
    properties:
      ar:
        type: "string"
      en:
        type: "string"
    example:
      ar: "ar"
      en: "en"
  Governorate_name:
    type: "object"
    properties:
      ar:
        type: "string"
      en:
        type: "string"
    example:
      ar: "ar"
      en: "en"
